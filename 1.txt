# システム基本設計書（Basic Design Document）

## 1. システム概要

本システムは、オンプレミス環境とクラウド（AWS）上の機能を連携させ、APIを介して情報の送受信を行うハイブリッド構成のWebアプリケーションです。AWSサービスを活用してセキュアかつスケーラブルな基盤を構築し、ユーザーおよび管理者向けのインタフェースを提供します。

---

## 2. システム構成図（概要）

* **Frontend/Local連携系**（API Gateway + Lambda）
* **Backend管理系**（CloudFront + WAF + API Gateway + Lambda）
* **共通基盤**：S3、DynamoDB、EventBridge、CloudWatch、SNS

---

## 3. 使用サービスと役割

| サービス                   | 役割                              |
| ---------------------- | ------------------------------- |
| S3                     | Lambdaコード（ZIP）の格納、イベント通知連携      |
| CloudFront             | 管理者画面への静的コンテンツ配信                |
| WAF                    | 不正アクセス対策（Core Rule Set使用）       |
| API Gateway (HTTP API) | フロント/バックエンドからのリクエスト受け口、Lambda連携 |
| Lambda (Python 3.12)   | 業務ロジック処理（APIリクエスト、DB操作等）        |
| DynamoDB               | データストア、PITR（35日）有効化             |
| EventBridge            | S3イベントのトリガー処理                   |
| CloudWatch             | ログ出力、アラーム設定                     |
| SNS                    | 通知（アラーム時メール配信等）                 |

---

## 4. 環境構成

| 項目            | 内容                    |
| ------------- | --------------------- |
| 環境種別          | dev / stg / prod      |
| リージョン         | ap-northeast-1（東京）    |
| Lambda実行環境    | Python 3.12、S3よりZIP取得 |
| API Gateway種別 | HTTP API（Lambda統合）    |

---

## 5. 機能一覧

### 5.1 フロントエンド連携機能（オンプレ連携）

* オンプレシステムからHTTP API経由でLambdaを呼び出す
* 必要なデータ処理を行い、DynamoDBへ書き込み

### 5.2 バックエンド管理機能

* 管理者向け画面はCloudFront配信
* CloudFront → WAF → API Gateway → Lambda 経由でAPI操作
* 出力結果はJSONとして提供、必要に応じてDynamoDB参照

---

## 6. セキュリティ設計

* WAF：AWS Managed Rules（Core Rule Set）適用
* IAM：最小権限の原則で各ロール設計（Lambda実行ロール、APIアクセスロール等）
* S3：バケットポリシー／暗号化設定（SSE-S3）有効

---

## 7. 可観測性・監視

* CloudWatch Logs：各Lambda／API Gatewayアクセスログ出力
* CloudWatch Alarms：Lambdaエラー回数、APIアクセスエラー等
* SNS：アラーム検知時にメール通知

---

## 8. イベント駆動設計

* S3アップロード（ZIPファイル）によりEventBridgeトリガー発火（必要に応じて）

---

## 9. 拡張性・今後の課題

* ACMを用いたHTTPS証明書自動発行（将来的に適用）
* Lambdaバージョン管理およびエイリアス展開によるBlue/Greenデプロイ対応
* DevOps強化のためCodePipeline/CDK導入検討

---

## 10. 補足情報

* テンプレートはCloudFormation YAML形式にて構築自動化対応済み
* 基盤構成はタグにより「基盤チーム」「Appチーム」管理を分離

---

以上
