1. 基本情報

[ ] 関数名（Function Name）

[ ] 説明（Description）

[ ] ランタイム（Runtime）例：Python 3.12 / Node.js 20.x など

[ ] アーキテクチャ（Architecture）例：x86_64 / arm64

[ ] ハンドラ（Handler）例：index.handler など

[ ] タイムアウト（Timeout）例：3秒、10秒など

[ ] メモリサイズ（Memory Size）例：128MB～10240MB

[ ] 環境変数（Environment Variables）

[ ] エイリアス・バージョン管理（Alias / Version 管理）


2. IAM・セキュリティ

[ ] 実行ロール（Execution Role）名と内容

[ ] VPC設定（VPC接続の有無・Subnet / Security Group）

[ ] 環境変数の暗号化（KMSキーの使用有無）

[ ] コンテナイメージ使用の有無（必要であれば ECR リンク）

[ ] ソースコードのアップロード元（ZIP / S3 / ECR）


3. トリガー設定

[ ] トリガータイプ（例：API Gateway、S3、EventBridge、SNS、DynamoDB Streamsなど）

[ ] トリガー設定の詳細（ルール、フィルタ、イベントタイプなど）

[ ] トリガーとの統合テスト予定の有無


4. ログ・モニタリング

[ ] CloudWatch Logs 出力の有無

[ ] ログ保持期間（例：1週間、無期限など）

[ ] メトリクス監視（例：エラー率、呼び出し回数、Durationなど）

[ ] アラーム設定（必要に応じて）


5. デプロイ・CI/CD関連

[ ] デプロイ方法（手動 / CodePipeline / CDK / CloudFormation など）

[ ] バージョン更新のタイミングと方法（自動 or 手動）

[ ] 本番環境・ステージング環境の切り替え戦略（例：Alias を利用）

[ ] ブルーグリーン or カナリアデプロイ戦略の使用有無


6. その他

[ ] デバッグ・テストデータの用意状況

[ ] 開発・本番での設定差分の整理

[ ] 外部サービスとの連携内容（APIキー、外部DB等）

[ ] 他Lambdaやリソースとの依存関係

[ ] 保守・監視体制（誰が責任者か、オンコールなど）
